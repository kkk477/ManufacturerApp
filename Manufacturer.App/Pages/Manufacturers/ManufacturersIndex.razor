@page "/Manufacturers"
@inject IManufacturerRepository repository
@inject IJSRuntime JS
@using Dul.Web

<h3>Manufacturers List</h3>

<p>고객사 리스트를 출력합니다.</p>
@if (manufacturers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Manufacturer Code</th>
                <th>Comment</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manufacturer in manufacturers)
            {
                <tr>
                    <td>@manufacturer.Id</td>
                    <td>@manufacturer.Name</td>
                    <td>@manufacturer.ManufacturerCode</td>
                    <td>@manufacturer.Comment</td>
                    <td><input type="button" value="Edit" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#manufacturerEditorDialog" @onclick="(() => EditBy(manufacturer))" /></td>
                    <td><input type="button" value="Delete" class="btn btn-danger" @onclick="(() => DeleteBy(manufacturer))" data-bs-toggle="modal" data-bs-target="#manufacturerDeleteDialog" /></td>
                </tr>
            }
        </tbody>
    </table>
}


<ManufacturerPager Model="pager" PageIndexChanged="PageIndexChanged"></ManufacturerPager>

<div>
    <input type="button" value="등록" data-bs-toggle="modal" data-bs-target="#manufacturerEditorDialog" class="btn btn-primary" @onclick="(() => btnCreate_Click())" />
</div>
<ManufacturerDeleteDialog OnClick="btnDelete_Click"></ManufacturerDeleteDialog>
<ManufacturerEditorForm EditorModel="@manufacturer" SaveOrUpdated="@SaveOrUpdated">
    <EditorFormTitle>@editorFormTitle</EditorFormTitle>
</ManufacturerEditorForm>

@code {
    private PagerBase pager = new PagerBase()
    {
            PageNumber = 1,
            PageIndex = 0,
            PageSize = 2,
            PagerButtonCount = 3
    };

    private string editorFormTitle = "";
    private List<Manufacturer> manufacturers;
    private Manufacturer manufacturer = new Manufacturer(); // 선택한 항목 관리

    protected void btnCreate_Click()
    {
        editorFormTitle = "등록하기";
        manufacturer = new Manufacturer();
    }


    protected override async Task OnInitializedAsync()
    {
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        //manufacturers = await repository.GetManufacturersAsync();
        manufacturers = pagingData.Records.ToList();
    }

    private async void DisplayData()
    {
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        
    }

    protected async Task btnDelete_Click()
    {
        //await JS.InvokeAsync<object>("alert", $"d{manufacturer.Id}번을 지울건가요?");
        await repository.DeleteManufacturerAsync(manufacturer.Id);   // 삭제
        await JS.InvokeAsync<object>("closeModal", "manufacturerDeleteDialog");
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        manufacturers = await repository.GetManufacturersAsync();
        manufacturers = pagingData.Records.ToList();    // 다시 불러오기
        manufacturer = new Manufacturer();                      // 선택 항목 초기화
    }

    private void DeleteBy(Manufacturer manu)
    {
        manufacturer = manu;
    }

    private void EditBy(Manufacturer manu)
    {
        editorFormTitle = "수정하기";
        manufacturer = manu;
    }

    // 등록 또는 수정 후 현재 페이지 다시 로드
    private async void SaveOrUpdated()
    {
        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        pager.RecordCount = pagingData.TotalRecords;
        manufacturers = await repository.GetManufacturersAsync();
        manufacturers = pagingData.Records.ToList();    // 다시 불러오기
        StateHasChanged();
    }

    // 페이저 버튼 클릭 콜백 메소드
    private async void PageIndexChanged(int pageIndex)
    {
        pager.PageIndex = pageIndex;
        pager.PageNumber = pageIndex + 1;

        var pagingData = await repository.GetAllByPageAsync(pager.PageIndex, pager.PageSize);
        manufacturers = pagingData.Records.ToList();

        StateHasChanged();
    }
}
